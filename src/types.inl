//========================================================================
// types.inl
//========================================================================
// Definitions for misc types (inlined)

#include "types.h"
#include <sstream>

//========================================================================
// Image
//========================================================================
//------------------------------------------------------------------------
// Constructors
//------------------------------------------------------------------------

inline Image::Image() {}

inline Image::Image( std::array<unsigned int, image_size>& data )
  : m_data ( data)
{}

//------------------------------------------------------------------------
// size
//------------------------------------------------------------------------

inline size_t Image::size() const
{
  return m_data.size();
}

//------------------------------------------------------------------------
// Itr begin() and end() methods
//------------------------------------------------------------------------

inline Image::ConstItr Image::begin() const
{
  return m_data.begin();
}

inline Image::ConstItr Image::end() const
{
  return m_data.end();
}

//------------------------------------------------------------------------
// at
//------------------------------------------------------------------------

inline unsigned int Image::at( size_t x, size_t y ) const
{
  if ( x >= n_cols || y >= n_rows ) {
    std::stringstream ss;
    ss << "(x = " << x << ", y = " << y << ")";
    throw std::out_of_range( ss.str() );
  }

  return m_data[ y*n_cols + x ];
}

//------------------------------------------------------------------------
// Operator overloading
//------------------------------------------------------------------------

inline unsigned int Image::operator[]( size_t idx ) const
{
  return m_data[idx];
}

//========================================================================
// Label
//========================================================================
//------------------------------------------------------------------------
// Constructors
//------------------------------------------------------------------------

inline Label::Label()
  : m_label ( Label::INVALID )
{}

inline Label::Label( char label )
  : m_label ( label )
{}

//------------------------------------------------------------------------
// get_label
//------------------------------------------------------------------------

inline char Label::get_label() const
{
  return m_label;
}

//------------------------------------------------------------------------
// set_label
//------------------------------------------------------------------------

inline void Label::set_label( char label )
{
  m_label = label;
}

//========================================================================
// LabeledImage
//========================================================================
//------------------------------------------------------------------------
// Constructors
//------------------------------------------------------------------------

inline LabeledImage::LabeledImage() {}

inline LabeledImage::LabeledImage( const Image& image, const Label& label )
: m_image ( image ),
  m_label ( label )
{}

//------------------------------------------------------------------------
// Itr begin() and end() methods
//------------------------------------------------------------------------

inline Image::ConstItr LabeledImage::begin() const
{
  return m_image.begin();
}

inline Image::ConstItr LabeledImage::end() const
{
  return m_image.end();
}

//------------------------------------------------------------------------
// get_label
//------------------------------------------------------------------------

inline char LabeledImage::get_label() const
{
  return m_label.get_label();
}

//------------------------------------------------------------------------
// get_image
//------------------------------------------------------------------------

inline const Image& LabeledImage::get_image() const
{
  return m_image;
}

//------------------------------------------------------------------------
// at
//------------------------------------------------------------------------

inline unsigned int LabeledImage::at( size_t x, size_t y ) const
{
  return m_image.at( x, y );
}

//------------------------------------------------------------------------
// Operator overloading
//------------------------------------------------------------------------

inline unsigned int LabeledImage::operator[]( size_t idx ) const
{
  return m_image[idx];
}

